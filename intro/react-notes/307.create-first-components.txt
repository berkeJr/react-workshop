307.İlk Component'lerimizi Oluşturalım:

-- Component mimarisini anladık, şimdi de component'in kendi yapsını anlayalım. Component'ler bir kaç şekilde oluyor. 

- Fonksiyon component'ler
- Class componentler 
- React-Hooks denilen yapı ile oluşturulan componenentler

Not: JavaScript'te fonksiyonlar; C#, Java gibi dillerdeki fonksiyonlarla benzerdir. Ayrıca JS'de fonksiyonlar da bir
tiptir. Yani int gibi, string gibi, fonksiyonlarda birer tiptir. Bu özelliği vasıtasıyla JS'de bambaşka bir ortam oluşuyor.


function App() {
  return (
    <div className="App">
        <h3>Hi there! It's Berke, Welcome to React!</h3>
        <h4>Deneme</h4>
    </div>
  );
  /**Burada return işlemi direkt olarak bir parantezle başlıyor. Burada bir .jsx yapısı var.  Yani JavaScript XML 
   * dediğimiz yapı var. Bu react'ta jsx yapısıdır. Peki nedir bu jsx yapısı? React aslında bir kütüphane ve arayüz
   * oluşturmaya yönelik kolaylıklar sağlıyor. O da react'ın en önemli yapısı. Yani .jsx yapısı. Normalde return 
   * içerisindeki ifadenin HTML'den bir farkı yok gibi gelebilir. Buradaki div aslında HTML olarak render ediliyor, 
   * yani biz html'deki div'i ve diğer elementleri aynen burada da kullanabiliyoruz, ama aslında buradaki yapı tam olarak
   * jsx yapısıdır. Yani bu div'in react kütüphanesinde bir karşılığı var. Ayrıca örneğin biz bu diV'in altında, dışında
   * bir h3 elementi oluşturursak hata verir. Örneğin bir div elementi var açılıp kapanıyor, biz onunla aynı hiyerarşide 
   * yani ona kardeş bir h3 element oluşturamayız. Yani bizim bir ana container tag'ımız olacak(div) biz onun içerisine 
   * yazacağız. 
   */   
}

Peki biz şimdi ilk componenentimizi oluşturmak istiyoruz. Componentimizi class componenti olarak oluşturacağız. 
intro klasörü içindeki src klasörü üzerinde sağ tıklayalım ve new file diyelim. Buraya geldiğimizde biz başka
bir componenti bu App içerisine yerleştireceğiz. Ana componentimiz bizim App'miz. Ana componenentimiz içerisine biz başka
bir component ekleyebiliriz. Yani olaya ana component'ten başlıyoruz. Örneğin App içerisinde, ana component, ana yapı
içerisinde bir navbar oluşturup onun da altında yan yana iki menü oluşturmak istiyoruz. Yani bizim App componenti
içerisinde 3 tane daha componente ihtiyacımız var. Componentlerin isimlendirilmeleri Pascal case, yani kelimelerin
ilk harfleri büyük harflerden oluşuyor. Src klasöründe sağ tıklayıp new file dedikten sonra file'ın adını Navi.js
yapalım. 

// Burada yeni componentimizi oluşturaacğız.

// rcc yazalım ve enter'a basalım, hani bir bileşen ekledik ya snippent'lar, işte rcc oradan geliyor.

// rcc + enter yapınca bize bir adet class component oluşturdu. 
import React, { Component } from 'react'

export default class Navi extends Component {
    render() {
        return (
            <div>
                <h2>Navi Component</h2>
            </div>
        )
    }
}

// Navi componentini App.js içerisine ekleyelim

import React from 'react'
// Navi componentini kullanabilmek için import etmemiz gerekli. 
import Navi from './Navi'

function App() {
  return (
    // Navi componentini burada kullanabiliriz. (div içerisinde)
    <div>
         <Navi></Navi>
         <Navi></Navi>
         <Navi/>
         <Navi/>
    </div>
  );

// Şimdi 2 tane daha component ekleyelim. CategoryList.js, ProductList.js


-- App.js ana componentimiz, 
-- Navi.js, CategoryList.js ve ProductList.js ana component içerisinde kullandığımız componentler
-- Daha sonra ise bu componentleri şekillendireceğiz. Onun içinde css veya farklı kütüphaneler kullanacağız.